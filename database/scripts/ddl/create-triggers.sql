-- ENDERECO
CREATE TRIGGER IF NOT EXISTS TR_ENDERECO_BEFORE_INSERT_VALIDA_DADOS
   BEFORE INSERT ON "ENDERECO"
BEGIN
    SELECT
        CASE
            WHEN NEW.NU_CEP NOT LIKE "________" THEN
                RAISE (ABORT, "NUMERO DE CEP INVALIDO")
        END;
END;

CREATE TRIGGER IF NOT EXISTS TR_ENDERECO_BEFORE_UPDATE_VALIDA_DADOS
   BEFORE UPDATE ON "ENDERECO"
BEGIN
    SELECT
        CASE
            WHEN NEW.NU_CEP NOT LIKE "________" THEN
                RAISE (ABORT, "NUMERO DE CEP INVALIDO")
        END;
END;

-- CONTATO
CREATE TRIGGER IF NOT EXISTS TR_CONTATO_BEFORE_INSERT_VALIDA_DADOS
   BEFORE INSERT ON "CONTATO"
BEGIN
    SELECT
        CASE
            WHEN NEW.NU_TELEFONE NOT LIKE "___________" THEN
                RAISE (ABORT, "NUMERO DE TELEFONE INVALIDO")
            WHEN NEW.NO_EMAIL NOT LIKE '%_@__%.__%' THEN
                RAISE (ABORT,'EMAIL INVALIDO')
        END;
END;

CREATE TRIGGER IF NOT EXISTS TR_CONTATO_BEFORE_UPDATE_VALIDA_DADOS
   BEFORE UPDATE ON "CONTATO"
BEGIN
    SELECT
        CASE
            WHEN NEW.NU_TELEFONE NOT LIKE "___________" THEN
                RAISE (ABORT, "NUMERO DE TELEFONE INVALIDO")
            WHEN NEW.NO_EMAIL NOT LIKE '%_@__%.__%' THEN
                RAISE (ABORT,'EMAIL INVALIDO')
        END;
END;

-- FUNCIONARIO
CREATE TRIGGER IF NOT EXISTS TR_FUNCIONARIO_BEFORE_INSERT_VALIDA_DADOS
   BEFORE INSERT ON "FUNCIONARIO"
BEGIN
    SELECT
        CASE
            WHEN NEW.NU_CPF NOT LIKE "___________" THEN
                RAISE (ABORT, "NUMERO DE CPF INVALIDO")
        END;
END;

CREATE TRIGGER IF NOT EXISTS TR_FUNCIONARIO_BEFORE_UPDATE_VALIDA_DADOS
   BEFORE UPDATE ON "FUNCIONARIO"
BEGIN
    SELECT
        CASE
            WHEN NEW.NU_CPF NOT LIKE "___________" THEN
                RAISE (ABORT, "NUMERO DE CPF INVALIDO")
        END;
END;

-- HOSPEDE
CREATE TRIGGER IF NOT EXISTS TR_HOSPEDE_BEFORE_INSERT_VALIDA_DADOS
   BEFORE INSERT ON "HOSPEDE"
BEGIN
    SELECT
        CASE
            WHEN NEW.NU_CPF NOT LIKE "___________" THEN
                RAISE (ABORT, "NUMERO DE CPF INVALIDO")
            WHEN NEW.DT_NASCIMENTO NOT LIKE "__/__/__" THEN
                RAISE (ABORT, "DATA DE NASCIMENTO INVALIDA")
        END;
END;

CREATE TRIGGER IF NOT EXISTS TR_HOSPEDE_BEFORE_UPDATE_VALIDA_DADOS
   BEFORE UPDATE ON "HOSPEDE"
BEGIN
    SELECT
        CASE
            WHEN NEW.NU_CPF NOT LIKE "___________" THEN
                RAISE (ABORT, "NUMERO DE CPF INVALIDO")
            WHEN NEW.DT_NASCIMENTO NOT LIKE "__/__/__" THEN
                RAISE (ABORT, "DATA DE NASCIMENTO INVALIDA")
        END;
END;

-- QUARTO
CREATE TRIGGER IF NOT EXISTS TR_QUARTO_BEFORE_INSERT_VALIDA_DADOS
   BEFORE INSERT ON "QUARTO"
BEGIN
    SELECT
        CASE
            WHEN NEW.IN_DISPONIVEL NOT IN (0, 1) THEN
                RAISE (ABORT, "INDICADOR BOOLEANO INVALIDO")
        END;
END;

CREATE TRIGGER IF NOT EXISTS TR_QUARTO_BEFORE_UPDATE_VALIDA_DADOS
   BEFORE UPDATE ON "QUARTO"
BEGIN
    SELECT
        CASE
            WHEN NEW.IN_DISPONIVEL NOT IN (0, 1) THEN
                RAISE (ABORT, "INDICADOR BOOLEANO INVALIDO")
        END;
END;

-- DATA_HOSPEDAGEM
CREATE TRIGGER IF NOT EXISTS TR_DATA_HOSPEDAGEM_BEFORE_INSERT_VALIDA_DADOS
   BEFORE INSERT ON "DATA_HOSPEDAGEM"
BEGIN
    SELECT
        CASE
            WHEN NEW.DT_ENTRADA NOT LIKE "__/__/____" THEN
                RAISE (ABORT, "DATA DE ENTRADA INVALIDA")
        END;
END;

CREATE TRIGGER IF NOT EXISTS TR_DATA_HOSPEDAGEM_BEFORE_UPDATE_VALIDA_DADOS
   BEFORE UPDATE ON "DATA_HOSPEDAGEM"
BEGIN
    SELECT
        CASE
            WHEN NEW.DT_ENTRADA NOT LIKE "__/__/____" THEN
                RAISE (ABORT, "DATA DE ENTRADA INVALIDA")
        END;
END;

-- HOSPEDAGEM
CREATE TRIGGER TR_HOSPEDAGEM_AFTER_INSERT_PREENCHE_VALOR
   AFTER INSERT ON "HOSPEDAGEM"
BEGIN
    SELECT
        CASE
            WHEN QUARTO.IN_DISPONIVEL = 0 THEN
                RAISE (ABORT, "QUARTO NAO ESTA DISPONIVEL")
		END
    FROM QUARTO
    WHERE QUARTO.ID_QUARTO = NEW.ID_QUARTO;

    UPDATE "HOSPEDAGEM"
    SET "VL_HOSPEDAGEM" = (
        SELECT SUM(T1.NU_NOITE * T3.VL_DIARIA)
        FROM DATA_HOSPEDAGEM T1, QUARTO T2
        LEFT JOIN TIPO_QUARTO T3 ON T2.ID_TIPO_QUARTO = T3.ID_TIPO_QUARTO
        WHERE   T1.ID_DATA_HOSPEDAGEM = NEW.ID_DATA_HOSPEDAGEM AND
                T2.ID_QUARTO = NEW.ID_QUARTO
    ) WHERE ID_HOSPEDAGEM = NEW.ID_HOSPEDAGEM;

    UPDATE "QUARTO"
    SET "IN_DISPONIVEL" = 0
    WHERE ID_QUARTO = NEW.ID_QUARTO;
END;